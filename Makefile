# Makefile cho Document Converter CLI v√† EST CLI

.PHONY: help install test demo convert clean est-help est-test est-demo est-analyze

# M·∫∑c ƒë·ªãnh
help:
	@echo "üìö Document Converter CLI & EST CLI & Index CLI - Makefile"
	@echo ""
	@echo "=== DOCUMENT CONVERTER ==="
	@echo "  make install      - C√†i ƒë·∫∑t dependencies"
	@echo "  make test         - Test script v·ªõi dry-run"
	@echo "  make demo         - Ch·∫°y demo chuy·ªÉn ƒë·ªïi"
	@echo "  make convert      - Chuy·ªÉn ƒë·ªïi file ch∆∞a c√≥ ·ªü output"
	@echo "  make convert-force - Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file (k·ªÉ c·∫£ ƒë√£ c√≥)"
	@echo "  make clean        - X√≥a c√°c file output"
	@echo ""
	@echo "=== EST CLI (ESTIMATION TOOL) ==="
	@echo "  make est-help     - Hi·ªÉn th·ªã help cho EST CLI"
	@echo "  make est-test     - Test EST CLI tool"
	@echo "  make est-demo     - Ch·∫°y demo ph√¢n t√≠ch v·ªõi markdown_files"
	@echo "  make est-analyze  - Ph√¢n t√≠ch d·ª± √°n v·ªõi folder t√πy ch·ªânh"
	@echo "  make est-setup    - Setup Qdrant cho dsRAG"
	@echo ""
	@echo "=== INDEX CLI (dsRAG INDEXING) ==="
	@echo "  make index-help   - Hi·ªÉn th·ªã help cho Index CLI"
	@echo "  make index-docs   - Index documents v√†o dsRAG Knowledge Base"
	@echo "  make index-search - T√¨m ki·∫øm trong Knowledge Base"
	@echo "  make index-list   - Li·ªát k√™ documents ƒë√£ index"
	@echo "  make index-setup  - Setup Qdrant cho indexing"
	@echo ""
	@echo "V√≠ d·ª• s·ª≠ d·ª•ng:"
	@echo "  make convert INPUT=/path/to/folder"
	@echo "  make convert INPUT=. OUTPUT=./markdown_files"
	@echo "  make est-analyze FOLDER=markdown_files PROJECT=TestProject"
	@echo "  make index-docs FOLDER=markdown_files PROJECT=TestProject"
	@echo "  make index-search QUERY='software development'"
	@echo "  make index-list FOLDER=markdown_files"

# Chuy·ªÉn ƒë·ªïi documents
convert:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi documents..."
	@if [ -z "$(INPUT)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh th∆∞ m·ª•c input: make convert INPUT=/path/to/folder"; \
		exit 1; \
	fi
	@if [ -z "$(OUTPUT)" ]; then \
		python3 convert_docs.py $(INPUT) --verbose; \
	else \
		python3 convert_docs.py $(INPUT) --output $(OUTPUT) --verbose; \
	fi

# Chuy·ªÉn ƒë·ªïi documents v·ªõi force convert
convert-force:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi documents (force mode)..."
	@if [ -z "$(INPUT)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh th∆∞ m·ª•c input: make convert-force INPUT=/path/to/folder"; \
		exit 1; \
	fi
	@if [ -z "$(OUTPUT)" ]; then \
		python3 convert_docs.py $(INPUT) --force-convert --verbose; \
	else \
		python3 convert_docs.py $(INPUT) --output $(OUTPUT) --force-convert --verbose; \
	fi

# Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i
convert-current:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i..."
	python3 convert_docs.py . --verbose

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
setup:
	@echo "‚öôÔ∏è Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng..."
	mkdir -p markdown_output demo_output

# === EST CLI COMMANDS ===

# Hi·ªÉn th·ªã help cho EST CLI
est-help:
	@echo "ü§ñ EST CLI - Estimation Tool Help"
	@echo ""
	@echo "C√∫ ph√°p:"
	@echo "  python3 est_cli.py --folder <folder> [options]"
	@echo ""
	@echo "Options:"
	@echo "  --folder, -f        ƒê∆∞·ªùng d·∫´n ƒë·∫øn folder ch·ª©a file markdown (b·∫Øt bu·ªôc)"
	@echo "  --output, -o        T√™n file Excel output (m·∫∑c ƒë·ªãnh: project_analysis.xlsx)"
	@echo "  --project-name, -p  T√™n d·ª± √°n (m·∫∑c ƒë·ªãnh: Software Project)"
	@echo "  --openai-key        OpenAI API Key (c√≥ th·ªÉ d√πng bi·∫øn m√¥i tr∆∞·ªùng OPENAI_API_KEY)"
	@echo ""
	@echo "V√≠ d·ª•:"
	@echo "  python3 est_cli.py --folder markdown_files"
	@echo "  python3 est_cli.py --folder markdown_files --project-name 'Test Project'"
	@echo "  python3 est_cli.py --folder markdown_files --output 'my_analysis.xlsx'"

# === INDEX CLI COMMANDS ===

# Hi·ªÉn th·ªã help cho Index CLI
index-help:
	@echo "üìö Index CLI - dsRAG Indexing Tool Help"
	@echo ""
	@echo "Commands:"
	@echo "  make index-docs      - Index documents v√†o dsRAG Knowledge Base"
	@echo "  make index-search    - T√¨m ki·∫øm trong Knowledge Base"
	@echo "  make index-list      - Li·ªát k√™ documents ƒë√£ index"
	@echo "  make index-test      - Test knowledge base v·ªõi query"
	@echo "  make index-setup     - Setup Qdrant cho indexing"
	@echo ""
	@echo "Setup:"
	@echo "  export OPENAI_API_KEY='your-openai-api-key'"
	@echo ""
	@echo "V√≠ d·ª•:"
	@echo "  make index-docs FOLDER=markdown_files PROJECT=TestProject"
	@echo "  make index-search QUERY='software development estimation'"
	@echo "  make index-list FOLDER=markdown_files"
	@echo "  make index-test FOLDER=markdown_files TEST_QUERY='test'"
	@echo "  make index-setup"

# Ph√¢n t√≠ch d·ª± √°n v·ªõi folder t√πy ch·ªânh
est-analyze:
	@echo "üîç ƒêang ph√¢n t√≠ch d·ª± √°n..."
	@if [ -z "$(FOLDER)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh folder: make est-analyze FOLDER=markdown_files"; \
		exit 1; \
	fi
	@if [ -z "$(PROJECT)" ]; then \
		python3 est_cli.py --folder $(FOLDER); \
	else \
		python3 est_cli.py --folder $(FOLDER) --project-name $(PROJECT); \
	fi

# Index documents v√†o dsRAG Knowledge Base
index-docs:
	@echo "üìö ƒêang index documents v√†o dsRAG Knowledge Base..."
	@if [ -z "$(FOLDER)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh folder: make index-docs FOLDER=markdown_files"; \
		exit 1; \
	fi
	@if [ -z "$(OPENAI_API_KEY)" ]; then \
		echo "‚ùå Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY: export OPENAI_API_KEY='your-api-key'"; \
		exit 1; \
	fi
	@if [ -z "$(PROJECT)" ]; then \
		python3 index_cli.py index --folder $(FOLDER); \
	else \
		python3 index_cli.py index --folder $(FOLDER) --project-name $(PROJECT); \
	fi

# T√¨m ki·∫øm trong Knowledge Base
index-search:
	@echo "üîç ƒêang t√¨m ki·∫øm trong Knowledge Base..."
	@if [ -z "$(QUERY)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh query: make index-search QUERY='software development'"; \
		exit 1; \
	fi
	@if [ -z "$(OPENAI_API_KEY)" ]; then \
		echo "‚ùå Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY: export OPENAI_API_KEY='your-api-key'"; \
		exit 1; \
	fi
	@if [ -z "$(MAX_RESULTS)" ]; then \
		python3 index_cli.py search --query "$(QUERY)"; \
	else \
		python3 index_cli.py search --query "$(QUERY)" --max-results $(MAX_RESULTS); \
	fi

# Li·ªát k√™ documents ƒë√£ index
index-list:
	@echo "üìö ƒêang li·ªát k√™ documents ƒë√£ index..."
	@if [ -z "$(FOLDER)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh folder: make index-list FOLDER=markdown_files"; \
		exit 1; \
	fi
	@if [ -z "$(OPENAI_API_KEY)" ]; then \
		echo "‚ùå Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY: export OPENAI_API_KEY='your-api-key'"; \
		exit 1; \
	fi
	@if [ -z "$(PROJECT)" ]; then \
		python3 index_cli.py index --folder $(FOLDER) --list-docs; \
	else \
		python3 index_cli.py index --folder $(FOLDER) --project-name $(PROJECT) --list-docs; \
	fi

# Test knowledge base v·ªõi query c·ª• th·ªÉ
index-test:
	@echo "üß™ ƒêang test knowledge base..."
	@if [ -z "$(FOLDER)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh folder: make index-test FOLDER=markdown_files"; \
		exit 1; \
	fi
	@if [ -z "$(OPENAI_API_KEY)" ]; then \
		echo "‚ùå Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY: export OPENAI_API_KEY='your-api-key'"; \
		exit 1; \
	fi
	@if [ -z "$(TEST_QUERY)" ]; then \
		python3 index_cli.py index --folder $(FOLDER) --test-query "software development"; \
	else \
		python3 index_cli.py index --folder $(FOLDER) --test-query "$(TEST_QUERY)"; \
	fi

# Setup Qdrant cho indexing
index-setup:
	@echo "‚öôÔ∏è ƒêang setup Qdrant cho dsRAG indexing..."
	@if [ -z "$(OPENAI_API_KEY)" ]; then \
		echo "‚ùå Vui l√≤ng thi·∫øt l·∫≠p OPENAI_API_KEY: export OPENAI_API_KEY='your-api-key'"; \
		exit 1; \
	fi
	@echo "üîß T·∫°o storage directory..."
	mkdir -p dsrag_storage/chunk_storage
	mkdir -p dsrag_storage/metadata
	mkdir -p dsrag_storage/vector_storage
	@echo "‚úÖ Qdrant storage ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p"
	@echo "üìù B√¢y gi·ªù b·∫°n c√≥ th·ªÉ index documents:"
	@echo "   make index-docs FOLDER=markdown_files PROJECT=TestProject"
