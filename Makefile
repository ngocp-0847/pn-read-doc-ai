# Makefile cho Document Converter CLI

.PHONY: help install test demo convert clean

# M·∫∑c ƒë·ªãnh
help:
	@echo "üìö Document Converter CLI - Makefile"
	@echo ""
	@echo "C√°c l·ªánh c√≥ s·∫µn:"
	@echo "  make install      - C√†i ƒë·∫∑t dependencies"
	@echo "  make test         - Test script v·ªõi dry-run"
	@echo "  make demo         - Ch·∫°y demo chuy·ªÉn ƒë·ªïi"
	@echo "  make convert      - Chuy·ªÉn ƒë·ªïi file ch∆∞a c√≥ ·ªü output"
	@echo "  make convert-force - Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file (k·ªÉ c·∫£ ƒë√£ c√≥)"
	@echo "  make clean        - X√≥a c√°c file output"
	@echo "  make help         - Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
	@echo ""
	@echo "V√≠ d·ª• s·ª≠ d·ª•ng:"
	@echo "  make convert INPUT=/path/to/folder"
	@echo "  make convert INPUT=. OUTPUT=./markdown_files"
	@echo "  make convert-force INPUT=. OUTPUT=./markdown_files"

# C√†i ƒë·∫∑t dependencies
install:
	@echo "üîß ƒêang c√†i ƒë·∫∑t dependencies..."
	pip install -r requirements.txt
	@echo "‚úÖ C√†i ƒë·∫∑t ho√†n t·∫•t!"

# C√†i ƒë·∫∑t dependencies cho file .xls
install-xls:
	@echo "üîß ƒêang c√†i ƒë·∫∑t dependencies cho file .xls..."
	pip install pandas openpyxl xlrd
	@echo "‚úÖ C√†i ƒë·∫∑t dependencies cho .xls ho√†n t·∫•t!"

# Test script
test:
	@echo "üß™ ƒêang test script..."
	python3 convert_docs.py . --dry-run --verbose

# Ch·∫°y demo
demo:
	@echo "üé¨ ƒêang ch·∫°y demo..."
	python3 demo.py

# Chuy·ªÉn ƒë·ªïi documents
convert:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi documents..."
	@if [ -z "$(INPUT)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh th∆∞ m·ª•c input: make convert INPUT=/path/to/folder"; \
		exit 1; \
	fi
	@if [ -z "$(OUTPUT)" ]; then \
		python3 convert_docs.py $(INPUT) --verbose; \
	else \
		python3 convert_docs.py $(INPUT) --output $(OUTPUT) --verbose; \
	fi

# Chuy·ªÉn ƒë·ªïi documents v·ªõi force convert
convert-force:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi documents (force mode)..."
	@if [ -z "$(INPUT)" ]; then \
		echo "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh th∆∞ m·ª•c input: make convert-force INPUT=/path/to/folder"; \
		exit 1; \
	fi
	@if [ -z "$(OUTPUT)" ]; then \
		python3 convert_docs.py $(INPUT) --force-convert --verbose; \
	else \
		python3 convert_docs.py $(INPUT) --output $(OUTPUT) --force-convert --verbose; \
	fi

# Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i
convert-current:
	@echo "üîÑ ƒêang chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i..."
	python3 convert_docs.py . --verbose

# X√≥a c√°c file output
clean:
	@echo "üßπ ƒêang d·ªçn d·∫πp..."
	rm -rf markdown_output demo_output conversion_errors.log
	@echo "‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!"

# Ki·ªÉm tra c√†i ƒë·∫∑t
check:
	@echo "üîç Ki·ªÉm tra c√†i ƒë·∫∑t..."
	@python3 -c "import docling; print('‚úÖ Docling ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t')" || echo "‚ùå Docling ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
	@python3 -c "import pathlib; print('‚úÖ Pathlib ƒë√£ c√≥ s·∫µn')"
	@echo "‚úÖ Ki·ªÉm tra ho√†n t·∫•t!"

# Hi·ªÉn th·ªã th√¥ng tin
info:
	@echo "üìä Th√¥ng tin h·ªá th·ªëng:"
	@echo "  Python version: $(shell python3 --version)"
	@echo "  Current directory: $(shell pwd)"
	@echo "  Files in current directory:"
	@ls -la *.py *.md *.txt *.sh Makefile 2>/dev/null || echo "  (Kh√¥ng c√≥ file script)"

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
setup:
	@echo "‚öôÔ∏è Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng..."
	mkdir -p markdown_output demo_output
	@echo "‚úÖ Thi·∫øt l·∫≠p ho√†n t·∫•t!" 