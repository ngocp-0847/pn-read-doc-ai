#!/usr/bin/env python3
"""
Script CLI ƒë·ªÉ chuy·ªÉn ƒë·ªïi c√°c file PDF, XLSX, XLSM th√†nh Markdown s·ª≠ d·ª•ng Docling
H·ªó tr·ª£ RAG cho h·ªá th·ªëng LLM
"""

import argparse
import os
import sys
import time
import subprocess
from datetime import datetime
from pathlib import Path
from typing import List, Set
import logging

try:
    from docling.document_converter import DocumentConverter
except ImportError:
    print("‚ùå L·ªói: Docling ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y: pip install docling")
    sys.exit(1)

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import c·∫•u h√¨nh
try:
    from config import (
        SUPPORTED_EXTENSIONS, SPECIAL_FORMATS, LOGGING_CONFIG, OUTPUT_CONFIG,
        DOCLING_CONFIG, ERROR_HANDLING, PERFORMANCE_CONFIG,
        RAG_CONFIG, IGNORE_PATTERNS, IGNORE_DIRECTORIES
    )
except ImportError:
    # Fallback n·∫øu kh√¥ng c√≥ file config
    SUPPORTED_EXTENSIONS = {'.pdf', '.xlsx', '.xlsm', '.xls'}
    SPECIAL_FORMATS = {'.xls'}
    LOGGING_CONFIG = {'level': 'INFO', 'format': '%(asctime)s - %(levelname)s - %(message)s'}
    OUTPUT_CONFIG = {'default_output_dir': './markdown_output', 'encoding': 'utf-8'}
    DOCLING_CONFIG = {'enable_ocr': True, 'enable_table_extraction': True}
    ERROR_HANDLING = {'continue_on_error': True, 'max_retries': 3}
    PERFORMANCE_CONFIG = {'max_workers': 4, 'timeout': 300}
    RAG_CONFIG = {'include_metadata': True, 'include_tables': True}
    IGNORE_PATTERNS = ['~$*', '*.tmp', '*.bak']
    IGNORE_DIRECTORIES = ['.git', '__pycache__']

def should_ignore_path(path: Path) -> bool:
    """
    Ki·ªÉm tra xem path c√≥ n√™n b·ªè qua kh√¥ng
    """
    path_str = str(path)
    
    # Ki·ªÉm tra th∆∞ m·ª•c b·ªè qua
    for ignore_dir in IGNORE_DIRECTORIES:
        if ignore_dir in path_str:
            return True
    
    # Ki·ªÉm tra pattern b·ªè qua
    for pattern in IGNORE_PATTERNS:
        if pattern in path_str:
            return True
    
    return False

def find_supported_files(directory: Path) -> List[Path]:
    """
    T√¨m t·∫•t c·∫£ c√°c file ƒë∆∞·ª£c h·ªó tr·ª£ trong th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
    """
    supported_files = []
    
    for file_path in directory.rglob('*'):
        # B·ªè qua c√°c file/th∆∞ m·ª•c kh√¥ng mong mu·ªën
        if should_ignore_path(file_path):
            continue
            
        if file_path.is_file() and file_path.suffix.lower() in SUPPORTED_EXTENSIONS:
            supported_files.append(file_path)
    
    return supported_files

def check_existing_output_files(input_files: List[Path], output_dir: Path) -> Set[str]:
    """
    Ki·ªÉm tra c√°c file ƒë√£ t·ªìn t·∫°i ·ªü output
    Tr·∫£ v·ªÅ set c√°c t√™n file markdown ƒë√£ t·ªìn t·∫°i
    """
    existing_files = set()
    
    if not output_dir.exists():
        return existing_files
    
    # L·∫•y danh s√°ch c√°c file markdown ƒë√£ t·ªìn t·∫°i
    for md_file in output_dir.glob('*.md'):
        existing_files.add(md_file.stem)
    
    return existing_files

def filter_files_to_convert(input_files: List[Path], output_dir: Path, force_convert: bool = False) -> List[Path]:
    """
    L·ªçc ra nh·ªØng file c·∫ßn chuy·ªÉn ƒë·ªïi
    N·∫øu force_convert=True, chuy·ªÉn ƒë·ªïi t·∫•t c·∫£
    N·∫øu force_convert=False, ch·ªâ chuy·ªÉn ƒë·ªïi file ch∆∞a c√≥ ·ªü output
    """
    if force_convert:
        return input_files
    
    existing_files = check_existing_output_files(input_files, output_dir)
    files_to_convert = []
    
    for file_path in input_files:
        output_filename = file_path.stem + '.md'
        output_path = output_dir / output_filename
        
        # Ki·ªÉm tra xem file output ƒë√£ t·ªìn t·∫°i ch∆∞a
        if output_path.exists():
            logger.info(f"‚è≠Ô∏è B·ªè qua file ƒë√£ t·ªìn t·∫°i: {file_path} -> {output_path}")
        else:
            files_to_convert.append(file_path)
    
    return files_to_convert

def convert_xls_to_xlsx(file_path: Path) -> Path:
    """
    Chuy·ªÉn ƒë·ªïi file .xls th√†nh .xlsx s·ª≠ d·ª•ng pandas
    """
    try:
        import pandas as pd
        import openpyxl
        
        logger.info(f"üîÑ ƒêang chuy·ªÉn ƒë·ªïi .xls th√†nh .xlsx: {file_path}")
        
        # ƒê·ªçc file .xls
        xls_file = pd.ExcelFile(file_path)
        
        # T·∫°o file .xlsx t·∫°m th·ªùi
        temp_xlsx_path = file_path.with_suffix('.xlsx')
        
        # Ghi ra file .xlsx
        with pd.ExcelWriter(temp_xlsx_path, engine='openpyxl') as writer:
            for sheet_name in xls_file.sheet_names:
                df = pd.read_excel(file_path, sheet_name=sheet_name)
                df.to_excel(writer, sheet_name=sheet_name, index=False)
        
        logger.info(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng: {temp_xlsx_path}")
        return temp_xlsx_path
        
    except ImportError:
        logger.error("‚ùå Pandas ho·∫∑c openpyxl ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y: pip install pandas openpyxl")
        return None
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi .xls: {str(e)}")
        return None

def convert_file_to_markdown(file_path: Path, output_dir: Path, converter: DocumentConverter) -> bool:
    """
    Chuy·ªÉn ƒë·ªïi m·ªôt file th√†nh Markdown v·ªõi retry logic
    """
    max_retries = ERROR_HANDLING.get('max_retries', 3)
    retry_delay = ERROR_HANDLING.get('retry_delay', 1)
    
    # Ki·ªÉm tra n·∫øu l√† file .xls c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát
    temp_xlsx_path = None
    original_file_path = file_path
    
    if file_path.suffix.lower() in SPECIAL_FORMATS:
        logger.info(f"üîß Ph√°t hi·ªán file ƒë·∫∑c bi·ªát: {file_path}")
        temp_xlsx_path = convert_xls_to_xlsx(file_path)
        if temp_xlsx_path:
            file_path = temp_xlsx_path
        else:
            logger.error(f"‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi file .xls: {original_file_path}")
            return False
    
    for attempt in range(max_retries):
        try:
            logger.info(f"üîÑ ƒêang chuy·ªÉn ƒë·ªïi: {original_file_path} (l·∫ßn th·ª≠ {attempt + 1}/{max_retries})")
            
            # Chuy·ªÉn ƒë·ªïi file
            result = converter.convert(str(file_path))
            
            # T·∫°o t√™n file output
            output_filename = original_file_path.stem + '.md'
            output_path = output_dir / output_filename
            
            # Xu·∫•t ra Markdown
            markdown_content = result.document.export_to_markdown()
            
            # Ghi file v·ªõi encoding ƒë∆∞·ª£c c·∫•u h√¨nh
            encoding = OUTPUT_CONFIG.get('encoding', 'utf-8')
            with open(output_path, 'w', encoding=encoding) as f:
                f.write(markdown_content)
            
            logger.info(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi th√†nh c√¥ng: {output_path}")
            
            # X√≥a file t·∫°m n·∫øu c√≥
            if temp_xlsx_path and temp_xlsx_path.exists():
                temp_xlsx_path.unlink()
                logger.info(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m: {temp_xlsx_path}")
            
            return True
            
        except Exception as e:
            error_msg = f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi {original_file_path}: {str(e)}"
            logger.error(error_msg)
            
            # Ghi l·ªói v√†o file log n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
            if ERROR_HANDLING.get('log_errors_to_file', False):
                error_log_file = ERROR_HANDLING.get('error_log_file', 'conversion_errors.log')
                try:
                    with open(error_log_file, 'a', encoding='utf-8') as f:
                        f.write(f"{datetime.now().isoformat()} - {error_msg}\n")
                except:
                    pass
            
            # N·∫øu kh√¥ng ph·∫£i l·∫ßn th·ª≠ cu·ªëi v√† ƒë∆∞·ª£c c·∫•u h√¨nh ti·∫øp t·ª•c
            if attempt < max_retries - 1 and ERROR_HANDLING.get('continue_on_error', True):
                logger.info(f"‚è≥ Ch·ªù {retry_delay} gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i...")
                time.sleep(retry_delay)
                continue
            else:
                break
    
    # X√≥a file t·∫°m n·∫øu c√≥ l·ªói
    if temp_xlsx_path and temp_xlsx_path.exists():
        temp_xlsx_path.unlink()
        logger.info(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m sau l·ªói: {temp_xlsx_path}")
    
    return False

def main():
    parser = argparse.ArgumentParser(
        description="Chuy·ªÉn ƒë·ªïi c√°c file PDF, XLSX, XLSM th√†nh Markdown s·ª≠ d·ª•ng Docling",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python convert_docs.py /path/to/input/folder
  python convert_docs.py /path/to/input/folder --output /path/to/output
  python convert_docs.py /path/to/input/folder --verbose
        """
    )
    
    parser.add_argument(
        'input_folder',
        type=str,
        help='Th∆∞ m·ª•c ch·ª©a c√°c file c·∫ßn chuy·ªÉn ƒë·ªïi'
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        help='Th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh: ./markdown_output)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Ch·ªâ hi·ªÉn th·ªã danh s√°ch file s·∫Ω chuy·ªÉn ƒë·ªïi, kh√¥ng th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi'
    )
    
    parser.add_argument(
        '--force-convert',
        action='store_true',
        help='Chuy·ªÉn ƒë·ªïi t·∫•t c·∫£ file, k·ªÉ c·∫£ nh·ªØng file ƒë√£ t·ªìn t·∫°i ·ªü output'
    )
    
    args = parser.parse_args()
    
    # Thi·∫øt l·∫≠p logging level
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Ki·ªÉm tra th∆∞ m·ª•c input
    input_path = Path(args.input_folder)
    if not input_path.exists():
        logger.error(f"‚ùå Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_path}")
        sys.exit(1)
    
    if not input_path.is_dir():
        logger.error(f"‚ùå ƒê∆∞·ªùng d·∫´n kh√¥ng ph·∫£i l√† th∆∞ m·ª•c: {input_path}")
        sys.exit(1)
    
    # T√¨m c√°c file ƒë∆∞·ª£c h·ªó tr·ª£
    logger.info(f"üîç ƒêang t√¨m ki·∫øm c√°c file trong: {input_path}")
    supported_files = find_supported_files(input_path)
    
    if not supported_files:
        logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file n√†o ƒë∆∞·ª£c h·ªó tr·ª£")
        logger.info(f"C√°c ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£: {', '.join(SUPPORTED_EXTENSIONS)}")
        sys.exit(0)
    
    logger.info(f"üìÅ T√¨m th·∫•y {len(supported_files)} file ƒë∆∞·ª£c h·ªó tr·ª£:")
    for file_path in supported_files:
        logger.info(f"  - {file_path}")
    
    if args.dry_run:
        logger.info("üîç Ch·∫ø ƒë·ªô dry-run: Ch·ªâ hi·ªÉn th·ªã danh s√°ch file")
        return
    
    # T·∫°o th∆∞ m·ª•c output
    default_output = OUTPUT_CONFIG.get('default_output_dir', './markdown_output')
    output_dir = Path(args.output) if args.output else Path(default_output)
    output_dir.mkdir(exist_ok=True)
    logger.info(f"üìÇ Th∆∞ m·ª•c output: {output_dir}")
    
    # L·ªçc ra nh·ªØng file c·∫ßn chuy·ªÉn ƒë·ªïi
    files_to_convert = filter_files_to_convert(supported_files, output_dir, args.force_convert)
    
    logger.info(f"üîÑ S·∫Ω chuy·ªÉn ƒë·ªïi {len(files_to_convert)}/{len(supported_files)} file:")
    for file_path in files_to_convert:
        logger.info(f"  - {file_path}")
    
    if len(files_to_convert) == 0:
        logger.info("‚úÖ T·∫•t c·∫£ file ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi tr∆∞·ªõc ƒë√≥!")
        return
    
    # Kh·ªüi t·∫°o converter
    try:
        converter = DocumentConverter()
        logger.info("üöÄ ƒê√£ kh·ªüi t·∫°o Docling converter")
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi kh·ªüi t·∫°o Docling converter: {str(e)}")
        sys.exit(1)
    
    # Chuy·ªÉn ƒë·ªïi c√°c file
    success_count = 0
    total_count = len(files_to_convert)
    
    for file_path in files_to_convert:
        if convert_file_to_markdown(file_path, output_dir, converter):
            success_count += 1
    
    # T·ªïng k·∫øt
    logger.info("=" * 50)
    logger.info("üìä T·ªîNG K·∫æT:")
    logger.info(f"  - T·ªïng s·ªë file: {total_count}")
    logger.info(f"  - Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng: {success_count}")
    logger.info(f"  - Th·∫•t b·∫°i: {total_count - success_count}")
    logger.info(f"  - Th∆∞ m·ª•c output: {output_dir.absolute()}")
    
    if success_count == total_count:
        logger.info("üéâ T·∫•t c·∫£ file ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
    else:
        logger.warning(f"‚ö†Ô∏è C√≥ {total_count - success_count} file chuy·ªÉn ƒë·ªïi th·∫•t b·∫°i")

if __name__ == "__main__":
    main() 